npm create vite@latest roulette-app --template react
cd roulette-app
npm install
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};
@tailwind base;
@tailwind components;
@tailwind utilities;
export function Button({ children, onClick, className = "", variant = "default", disabled = false }) {
  const base = "px-4 py-2 rounded font-semibold";
  const style = variant === "default"
    ? "bg-red-600 text-white hover:bg-red-700"
    : "bg-transparent border border-white text-white hover:bg-white hover:text-green-900";
  return (
    <button
      onClick={onClick}
      disabled={disabled}
      className={`${base} ${style} ${className} ${disabled ? "opacity-50 cursor-not-allowed" : ""}`}
    >
      {children}
    </button>
  );
}
export function Card({ children, className = "" }) {
  return (
    <div className={`bg-white bg-opacity-10 backdrop-blur-md p-4 rounded-xl shadow-md ${className}`}>
      {children}
    </div>
  );
}

export function CardContent({ children, className = "" }) {
  return <div className={className}>{children}</div>;
}
// import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";

const redNumbers = [1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36];
const blackNumbers = [2,4,6,8,10,11,13,15,17,20,22,24,26,28,29,31,33,35];

export default function RouletteApp() {
  const [balance, setBalance] = useState(0);
  const [betType, setBetType] = useState({ type: "color", value: "red" });
  const [betAmount, setBetAmount] = useState(10);
  const [result, setResult] = useState(null);
  const [spinning, setSpinning] = useState(false);
  const [user, setUser] = useState(null);
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");

  useEffect(() => {
    const currentUser = localStorage.getItem("current_user");
    const allUsers = JSON.parse(localStorage.getItem("roulette_users") || "{}");
    if (currentUser && allUsers[currentUser]) {
      setUser(allUsers[currentUser]);
      setBalance(allUsers[currentUser].balance);
    }
  }, []);

  const saveUserData = (userData) => {
    const allUsers = JSON.parse(localStorage.getItem("roulette_users") || "{}");
    allUsers[userData.email] = userData;
    localStorage.setItem("roulette_users", JSON.stringify(allUsers));
    localStorage.setItem("current_user", userData.email);
  };

  const register = () => {
    const allUsers = JSON.parse(localStorage.getItem("roulette_users") || "{}");
    if (allUsers[email]) return alert("User already exists");
    const newUser = { email, password, balance: 1000 };
    saveUserData(newUser);
    setUser(newUser);
    setBalance(1000);
  };

  const login = () => {
    const allUsers = JSON.parse(localStorage.getItem("roulette_users") || "{}");
    const storedUser = allUsers[email];
    if (storedUser && storedUser.password === password) {
      setUser(storedUser);
      setBalance(storedUser.balance);
      localStorage.setItem("current_user", email);
    } else {
      alert("Invalid login");
    }
  };

  const logout = () => {
    setUser(null);
    setEmail("");
    setPassword("");
    localStorage.removeItem("current_user");
  };

  const spinRoulette = () => {
    if (spinning || betAmount <= 0 || isNaN(betAmount) || betAmount > balance) return;

    setSpinning(true);
    const rolledNumber = Math.floor(Math.random() * 37);

    setTimeout(() => {
      let win = false;
      if (betType.type === "color") {
        if (betType.value === "red" && redNumbers.includes(rolledNumber)) win = true;
        if (betType.value === "black" && blackNumbers.includes(rolledNumber)) win = true;
      } else if (betType.type === "number" && Number(betType.value) === rolledNumber) {
        win = true;
      }

      const payout = betType.type === "number" ? betAmount * 35 : betAmount * 2;
      const newBalance = win ? balance + payout - betAmount : balance - betAmount;

      setBalance(newBalance);
      setResult({ rolledNumber, win });
      if (user) saveUserData({ ...user, balance: newBalance });
      setSpinning(false);
    }, 2000);
  };

  if (!user) {
    return (
      <div className="min-h-screen bg-green-900 text-white flex flex-col items-center py-10 space-y-4">
        <h1 className="text-4xl font-bold">Login / Register</h1>
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          className="rounded p-2 text-black"
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          className="rounded p-2 text-black"
        />
        <div className="flex gap-4">
          <Button onClick={login}>Login</Button>
          <Button onClick={register}>Register</Button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-green-900 text-white flex flex-col items-center py-10 space-y-6">
      <h1 className="text-4xl font-bold mb-4">Casino Roulette</h1>

      <Button className="absolute top-4 right-4" onClick={logout}>Logout</Button>

      <Card className="w-80">
        <CardContent className="flex flex-col space-y-4 items-center">
          <p>Welcome, {user.email}</p>
          <p>Balance: ${balance}</p>
          <div className="flex gap-2">
            <Button
              variant={betType.type === "color" && betType.value === "red" ? "default" : "outline"}
              onClick={() => setBetType({ type: "color", value: "red" })}
            >
              Red
            </Button>
            <Button
              variant={betType.type === "color" && betType.value === "black" ? "default" : "outline"}
              onClick={() => setBetType({ type: "color", value: "black" })}
            >
              Black
            </Button>
            <input
              type="number"
              min="0"
              max="36"
              placeholder="Number"
              className="w-16 text-black text-center rounded"
              onChange={(e) => {
                const value = e.target.value;
                if (value === "") return;
                setBetType({ type: "number", value: Number(value) });
              }}
            />
          </div>
          <input
            type="number"
            value={betAmount}
            onChange={(e) => setBetAmount(Number(e.target.value))}
            className="w-20 text-center text-black rounded"
            min="1"
            max={balance}
          />
          <Button onClick={spinRoulette} disabled={spinning}>Spin</Button>
          {spinning && <p>Spinning...</p>}
          {result && !spinning && (
            <p>
              Rolled: {result.rolledNumber} â€” {result.win ? "ðŸŽ‰ You Win!" : "ðŸ˜ž You Lose!"}
            </p>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
npm run dev
http://localhost:5173/
npm run build
